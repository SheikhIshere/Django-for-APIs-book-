here is the main thing you need to know


error from the web:
====================
TemplateDoesNotExist at /api/docs/
drf_spectacular/swagger_ui.html
Request Method:	GET
Request URL:	http://127.0.0.1:8000/api/docs/
Django Version:	5.2.7
Exception Type:	TemplateDoesNotExist
Exception Value:	
drf_spectacular/swagger_ui.html
Exception Location:	C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\template\loader.py, line 47, in select_template
Raised during:	drf_spectacular.views.SpectacularSwaggerView
Python Executable:	C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\Scripts\python.exe
Python Version:	3.10.6
Python Path:	
['C:\\Users\\HelloWorld\\Desktop\\test\\django-rest\\Blog-api\\backend',
 'C:\\Users\\HelloWorld\\AppData\\Local\\Programs\\Python\\Python310\\python310.zip',
 'C:\\Users\\HelloWorld\\AppData\\Local\\Programs\\Python\\Python310\\DLLs',
 'C:\\Users\\HelloWorld\\AppData\\Local\\Programs\\Python\\Python310\\lib',
 'C:\\Users\\HelloWorld\\AppData\\Local\\Programs\\Python\\Python310',
 'C:\\Users\\HelloWorld\\Desktop\\test\\django-rest\\Blog-api\\backend\\.venv',
 'C:\\Users\\HelloWorld\\Desktop\\test\\django-rest\\Blog-api\\backend\\.venv\\lib\\site-packages']
Server time:	Fri, 03 Oct 2025 09:14:25 +0000
Template-loader postmortem
Django tried loading these templates, in this order:

Using engine django:

django.template.loaders.app_directories.Loader: C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\contrib\admin\templates\drf_spectacular\swagger_ui.html (Source does not exist)
django.template.loaders.app_directories.Loader: C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\contrib\auth\templates\drf_spectacular\swagger_ui.html (Source does not exist)
django.template.loaders.app_directories.Loader: C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\templates\drf_spectacular\swagger_ui.html (Source does not exist)
django.template.loaders.app_directories.Loader: C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\allauth\templates\drf_spectacular\swagger_ui.html (Source does not exist)
Traceback Switch to copy-and-paste view
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\core\handlers\exception.py, line 55, in inner
                response = get_response(request) …
Local vars
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\core\handlers\base.py, line 220, in _get_response
                response = response.render() …
Local vars
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\template\response.py, line 114, in render
            self.content = self.rendered_content …
Local vars
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\response.py, line 74, in rendered_content
        ret = renderer.render(self.data, accepted_media_type, context) …
Local vars
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\renderers.py, line 160, in render
            template = self.resolve_template(template_names) …
Local vars
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\renderers.py, line 170, in resolve_template
        return loader.select_template(template_names) …
Local vars
C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\template\loader.py, line 47, in select_template
        raise TemplateDoesNotExist(", ".join(template_name_list), chain=chain) …
Local vars


error terminal:
====================

WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.
For more information on production servers see: https://docs.djangoproject.com/en/5.2/howto/deployment/
Not Found: /docs/
[03/Oct/2025 15:14:17] "GET /docs/ HTTP/1.1" 404 3338
Internal Server Error: /api/docs/
Traceback (most recent call last):
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\core\handlers\exception.py", line 55, in inner
    response = get_response(request)
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\core\handlers\base.py", line 220, in _get_response
    response = response.render()
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\template\response.py", line 114, in render
    self.content = self.rendered_content
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\response.py", line 74, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\renderers.py", line 160, in render
    template = self.resolve_template(template_names)
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\rest_framework\renderers.py", line 170, in resolve_template
    return loader.select_template(template_names)
  File "C:\Users\HelloWorld\Desktop\test\django-rest\Blog-api\backend\.venv\lib\site-packages\django\template\loader.py", line 47, in select_template
    raise TemplateDoesNotExist(", ".join(template_name_list), chain=chain)
django.template.exceptions.TemplateDoesNotExist: drf_spectacular/swagger_ui.html
[03/Oct/2025 15:14:25] "GET /api/docs/ HTTP/1.1" 500 98904




project/urls.py:
====================
from django.contrib import admin
from django.urls import path, include
from drf_spectacular.views import (
    SpectacularAPIView,
    SpectacularSwaggerView,
    SpectacularRedocView,
)

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/v1/", include("posts.urls")),

    # DRF auth
    path("api-auth/", include("rest_framework.urls")),

    # dj-rest-auth login/logout/signup
    path("api/v1/rest-auth/", include("dj_rest_auth.urls")),
    path("api/v1/rest-auth/registration/", include("dj_rest_auth.registration.urls")),

    # OpenAPI schema (JSON)
    path("api/schema/", SpectacularAPIView.as_view(), name="schema"),

    # Swagger UI
    path("api/docs/", SpectacularSwaggerView.as_view(url_name="schema"), name="swagger-ui"),

    # ReDoc UI
    path("api/redoc/", SpectacularRedocView.as_view(url_name="schema"), name="redoc"),
]

project/settings.py:
======================


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-uifo5-c(o-2(s2p6wnzax&&jzt^e&g@2r=y!mxb8)u-d_rn*2c"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',


    # 3rd party packege
    'rest_framework',
    'rest_framework.authtoken', # this for generate token when some one logged in
    'allauth', #from all auth
    'allauth.account', #from all auth
    'allauth.socialaccount', #from all auth
    'dj_rest_auth', #from all auth
    'dj_rest_auth.registration', #from all auth

    # local apps
    'posts.apps.PostsConfig',
]

SITE_ID = 1 

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
       'rest_framework.authentication.SessionAuthentication',
       'rest_framework.authentication.TokenAuthentication',
    ],
    # Use drf-spectacular for schema
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # thi is from allauth
    "allauth.account.middleware.AccountMiddleware",
]

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # default
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
)



ROOT_URLCONF = "blog_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "blog_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"








apps/urls.py:
====================

from rest_framework.routers import SimpleRouter
from .views import UserViewSet, PostViewSet

router = SimpleRouter()
router.register('users', UserViewSet, basename='users')
router.register('posts', PostViewSet, basename='posts')

urlpatterns = router.urls


# this for one line all api


apps/views.py:
====================
# posts/views.py
from django.contrib.auth import get_user_model
from rest_framework import viewsets
from .models import Post
from .permissions import IsAuthorOrReadOnly
from .serializers import PostSerializer, UserSerializer


class PostViewSet(viewsets.ModelViewSet):
    """Handle all CRUD operations for Post"""
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    permission_classes = [IsAuthorOrReadOnly]


class UserViewSet(viewsets.ModelViewSet):
    """Handle all CRUD operations for User"""
    queryset = get_user_model().objects.all()
    serializer_class = UserSerializer


apps/models.py:
====================
from django.db import models
from django.contrib.auth.models import User

# Create your models here.


class Post(models.Model):
    author = models.ForeignKey(
        User, 
        on_delete=models.CASCADE
    )
    title = models.CharField(max_length = 50)
    body = models.TextField()
    created_at = models.DateTimeField(
        auto_now_add=True
    )
    updated_at = models.DateTimeField(
        auto_now=True
    )
    

    def __str__(self):
        return self.title
    


apps/serializers.py:
======================
# posts/serializers.py
from django.contrib.auth import get_user_model # new
from rest_framework import serializers
from .models import Post

User = get_user_model()


class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Post
        fields = [
            'id', 
            'author',
            'title', 
            'body'
        ]  # Hide author and timestamps
       

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ["id", "username", "email"]
